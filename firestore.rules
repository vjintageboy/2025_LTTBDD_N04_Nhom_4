rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ============================================
    // USERS COLLECTION (NEW - for admin system)
    // ============================================
    match /users/{userId} {
      // Anyone authenticated can read their own user doc
      allow read: if isOwner(userId);
      
      // User can create their own profile on signup
      allow create: if isOwner(userId);
      
      // User can update their own profile (except role)
      allow update: if isOwner(userId) && 
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']);
      
      // Only admin can change roles
      allow update: if isAdmin();
      
      // Admin can read all users
      allow read: if isAdmin();
      
      // Admin can delete users
      allow delete: if isAdmin();
    }
    
    // ============================================
    // USER PROFILES (Legacy - keep for backward compatibility)
    // ============================================
    match /profiles/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
    }
    
    // ============================================
    // MOOD ENTRIES
    // ============================================
    match /moodEntries/{entryId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // ============================================
    // MEDITATIONS - Everyone reads, only admin writes
    // ============================================
    match /meditations/{meditationId} {
      allow read: if true; // Public read
      allow create, update, delete: if isAdmin(); // Only admin can write
    }
    
    // ============================================
    // STREAKS
    // ============================================
    match /streaks/{streakId} {
      allow read: if isOwner(streakId);
      allow create, update: if isOwner(streakId);
      allow delete: if isOwner(streakId);
    }
    
    // ============================================
    // MEDITATION COMPLETIONS
    // ============================================
    match /meditationCompletions/{completionId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // ============================================
    // USER ACTIVITIES
    // ============================================
    match /userActivities/{activityId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // ============================================
    // EXPERTS - Coming soon (Phase 3)
    // ============================================
    match /experts/{expertId} {
      allow read: if true; // Public read
      allow write: if isAdmin(); // Only admin can manage experts
    }
    
    // ============================================
    // APPOINTMENTS - Coming soon (Phase 3)
    // ============================================
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || 
                     resource.data.expertId == request.auth.uid);
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || 
                       resource.data.expertId == request.auth.uid);
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // ============================================
    // CONFIG - Public read, admin write
    // ============================================
    match /config/{configId} {
      allow read: if true; // Public read
      allow write: if isAdmin(); // Only admin can update config
    }
  }
}
